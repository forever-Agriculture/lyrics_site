"""
Django settings for basic project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# The root directory of the Django project.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# The root directory of the project (the lowest level).
BASE_DIR_UP = os.path.dirname(BASE_DIR)

# Path to the custom Django applications.
# ** It is necessary! If a third-party app is just copied to the apps/ but not
# installed through the pip.
sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# Path to the server settings.
sys.path.insert(1, os.path.join(BASE_DIR_UP, 'world/etc'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/


ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # my apps
    'apps.songs_artists',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'basic.urls'


_template_dirs = [os.path.join(BASE_DIR, 'website/templates'), ]
for root, dirs, files in os.walk(os.path.join(BASE_DIR, 'apps')):
    if 'templates' in dirs:
        _template_dirs.append(os.path.join(root, 'templates'))


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': _template_dirs,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'basic.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR_UP, 'world/var/sys/sqlite3/db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGES = [
    ('uk', _('Ukrainian')),
    ('en', _('English')),
]

LANGUAGE_CODE = 'uk'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

_static_dirs = [os.path.join(BASE_DIR, 'website/static'), ]
for root, dirs, files in os.walk(os.path.join(BASE_DIR, 'apps')):
    if 'static' in dirs:
        _static_dirs.append(os.path.join(root, 'static'))

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR_UP, 'world/var/www/static')
STATICFILES_DIRS = _static_dirs


# Media
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR_UP, 'world/var/www/media')


# Expand the default settings.
# Loading extension parameters of standard configurations, see: world/etc/.
try:
    from local_settings import *
except ImportError:
    pass
